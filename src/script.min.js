let quizType;

function notif() {
    console.clear(), console.log("%c\nKaheet made by pxtrez edited by roi\n", "color:#ff66ff"), console.log("Thank you for using Kaheet! I recommend that you read the docs before use!\nhttps://github.com/roib2010/kaheet/\nPheaServices © 2021\nEducational purposes only!"), alert("Thank you for using Kaheet!\nI recommend reading the docs before using!\nhttps://github.com/roib2010/kaheet/\nPheaServices © 2021")
}

function getInput() {
    return new Promise(((e, t) => {
        let o = prompt("\n📜 Enter the last part of link, that's visible on the teacher's screen.\n❓  Where's quizID?\n🔗 https://play.kahoot.it/v2/lobby?quizId= [ quizID ]\n🔗 https://kahoot.it/challenge/ [ quizID ]\n⚠️  Remember that the quizID is not the same as the quiz join code\n⚠️  Getting answers by quiz join code is not supported yet\n⚠️  Kaheet is 100% safe, which means it's not a virus or crap like that\n❌ TO EXIT CLICK F5\n            ");
        "" !== o.trim() ? e(o) : t("Empty input")
    }))
}

function checkInput(e) {
    return new Promise((async (t, o) => {
        const n = await fetch(`https://kahoot.it/rest/kahoots/${e}`);
        if (n.ok && 400 !== n.status) {
            console.log("✔️  QuizID found!");
            t(await n.json())
        } else {
            const n = await fetch(`https://kahoot.it/rest/challenges/${e}/answers`),
                r = await n.json();
            if (!n.ok || 400 === n.status) return console.log("⚠️  Error: QuizID not found!"), o("QuizID not found");
            quizType = "challenge", console.log("✔️  QuizID found!"), t(r.challenge.kahoot)
        }
    }))
}

function parse(e) {
    return new Promise((t => {
        let o = [];
        e.questions.forEach((e => {
            questionData = {
                question: e.question,
                type: e.type,
                answers: [],
                check: [],
                correct: [],
                skip: !1
            }, "content" !== e.type && "multiple_select_poll" !== e.type && "survey" !== e.type || (questionData.skip = !0), e.choices && e.choices.forEach(((e, t) => {
                e.correct ? (questionData.correct.push(t), e.answer ? questionData.answers.push(e.answer) : questionData.answers.push("[ FAILED ]")) : questionData.check.push(t)
            })), o.push(questionData)
        })), answersToConsole(o), "challenge" === quizType ? (alert("Ugh! We've detected, that you're running challenge mode!\nFor all answers, you have to check the console!"), alert("If you want to have time to search current question,\nyou can pause quiz timers by typing 'pause()' in console!"), t(!0)) : t(o)
    }))
}

function highlight(e) {
    "boolean" != typeof e && setInterval((() => {
        let t;
        try {
            t = JSON.parse(localStorage.getItem("kahoot-game_session")).questionNumber
        } catch (e) {}
        if (t) {
            let {
                type: o,
                check: n,
                correct: r,
                answers: s
            } = e[t];
            if ("content" !== o && "multiple_select_poll" !== o) {
                let e = document.querySelector("#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > div.status-bar__ContentBar-ivth8h-0.status-bar__TopBar-ivth8h-1.gCnEqt.GFKFx.top-bar__TopBar-sc-186o9v8-0.bIPhxy.question__TopBar-sc-12j7dwx-0.buBRpJ > div");
                if (e) {
                    let t = s.join("</p><p>");
                    "grid" !== e.style.display && (e.style.display = "grid", e.style.fontSize = "25px", e.style.textAlign = "left", e.style.lineHeight = "1.3", e.innerHTML = `<p><p style="font-size: xxx-large;color: #00fff8;">Correct ${r.length}/${r.length+n.length} answers:</p><p>${t}</p><p style="color: lime;">Question type: ${o}`)
                }
                "quiz" !== o && "multiple_select_quiz" !== o || null !== document.querySelector('[data-functional-selector="answer-1"]') && (n.forEach((e => {
                    let t = document.querySelector(`[data-functional-selector="answer-${e}"]`);
                    "0.5s" !== t.style.transition && (t.style.transition = "0.5s", t.style.opacity = .2, t.style.filter = "blur(3px) grayscale(1)")
                })), r.forEach((e => {
                    let t = document.querySelector(`[data-functional-selector="answer-${e}"]`);
                    "0.5s" !== t.style.transition && (t.style.transition = "0.5s", t.style.filter = "contrast(2)", t.style.border = "lime solid 3px", t.style.borderRadius = "5px")
                })))
            }
            if ("open_ended" === o) {
                let e = document.querySelector('[data-functional-selector="text-answer-input"]');
                e && (e.placeholder = s[0])
            }
        }
    }), 50)
}

function pause() {
    alert("Now you can search your question without loosing time!\nRemember, that teacher can see illegal time!\nTo resume, click 'OK' below")
}

function answersToConsole(e) {
    e.forEach((e => {
        e.skip || console.log(`\n%c❓ Question: %c${e.question}\n%c📝 Answers (${e.answers.length}): %c\n${e.answers.join("\n")}`, "color:orange;font-size:15px;", "color:white;font-size:20px;", "color:yellow;font-size:15px;", "color:white;font-size:20px;border:orange 1px solid;")
    }))
}

function doFunc(selector, functions) {
    let main = "black",
        text = "white",
        background = "url('https://gifimage.net/wp-content/uploads/2017/09/black-and-white-gif-background-tumblr-7.gif')",
        border = "lime dashed 3px",
        element = document.querySelector(selector);
    element && functions.forEach((func => {
        eval(func)
    }))
}

function theme() {
    let e = {
        nameholder: {
            elems: ['[data-functional-selector="nickname-status-bar"]'],
            do: ["element.innerHTML = '💉 Kaheet has been injected! 💉'"]
        },
        nav: {
            elems: ['[data-functional-selector="controller-top-bar"]'],
            do: ["element.style.backgroundColor = main", "element.style.color = text"]
        },
        footer: {
            elems: ["#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > div.status-bar__ContentBar-ivth8h-0.status-bar__BottomBar-ivth8h-2.gCnEqt.deQFTW.bottom-bar__BottomBar-sc-1bibjvm-0.cNyMFo", "#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > div"],
            do: ["element.style.backgroundColor = main", "element.style.color = text"]
        },
        contentBg: {
            elems: ["#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > div.question__PageMainContent-sc-12j7dwx-1.fMGBvU"],
            do: ["element.style.backgroundColor = main"]
        },
        bg: {
            elems: ["#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > div.styles__ResultPageMainContent-sc-15a2o5w-1.bMYQoA", "#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > div.styles__ResultPageMainContent-sc-15a2o5w-1.bMYQoA", "#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > main", "#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > div.background__Background-sc-15eg2v3-0.kPfwDm.sent__Background-sc-1s8zmdp-1.ffyYDa", "#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > div.wait-for-next-question__MainContainer-sc-1jhgzye-4.bXhFLq", "#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > div.background__Background-sc-15eg2v3-0.kPfwDm > div", "#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > div > main"],
            do: ["element.style.backgroundImage = background", "element.style.backgroundSize = 'cover'"]
        },
        dragbox: {
            elems: ["#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > div.question__PageMainContent-sc-12j7dwx-1.fMGBvU > div > section > div:nth-child(1)", "#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > div.question__PageMainContent-sc-12j7dwx-1.fMGBvU > div > section > div:nth-child(2)", "#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > div.question__PageMainContent-sc-12j7dwx-1.fMGBvU > div > section > div:nth-child(3)", "#root > div.controller__AppWrapper-sc-1m4rw0k-0.hHwuuw > main > div.question__PageMainContent-sc-12j7dwx-1.fMGBvU > div > section > div:nth-child(4)"],
            do: ["element.style.border = border"]
        }
    };
    setInterval((() => {
        Object.keys(e).forEach(((t, o) => {
            let n = Object.keys(e)[o];
            e[n].elems.forEach((t => {
                doFunc(t, e[n].do)
            }))
        }))
    }))
}(async () => {
    theme(), notif();
    const e = await getInput(),
        t = await checkInput(e);
    highlight(await parse(t)), console.log("If you want to have time to search current question,\nyou can pause quiz timers by typing 'pause()' in console!")
})();
